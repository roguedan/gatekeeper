name: Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  deployments: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify release
        if: github.event_name == 'release'
        run: |
          echo "Deploying release: ${{ github.event.release.tag_name }}"
          echo "Release URL: ${{ github.event.release.html_url }}"

      - name: Check Docker image exists
        run: |
          TAG=${{ github.event.release.tag_name || 'latest' }}
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    environment:
      name: staging
      url: https://staging.gatekeeper.example.com
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'release' && !contains(github.event.release.tag_name, 'rc'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: staging
          ref: ${{ github.ref }}

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          # Example deployment script - adjust for your infrastructure
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/gatekeeper

            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name || 'latest' }}

            # Update docker-compose with new image
            export IMAGE_TAG=${{ github.event.release.tag_name || 'latest' }}

            # Stop old containers
            docker-compose down

            # Start new containers
            docker-compose up -d

            # Wait for health check
            sleep 10
          EOF

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          max_attempts=30
          attempt=0
          until curl -f https://staging.gatekeeper.example.com/health || [ $attempt -eq $max_attempts ]; do
            echo "Waiting for service... ($attempt/$max_attempts)"
            sleep 5
            attempt=$((attempt + 1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Service failed to start"
            exit 1
          fi

          echo "✅ Service is healthy"

      - name: Run API tests
        run: |
          # Test basic endpoints
          curl -f https://staging.gatekeeper.example.com/health
          curl -f https://staging.gatekeeper.example.com/auth/siwe/nonce

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success
          environment-url: https://staging.gatekeeper.example.com

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure

      - name: Notify deployment
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "Staging Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment*\nVersion: ${{ github.event.release.tag_name || github.sha }}\nStatus: ${{ job.status }}\nURL: https://staging.gatekeeper.example.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://gatekeeper.example.com
    if: |
      (github.event.inputs.environment == 'production' || github.event_name == 'release') &&
      !contains(github.event.release.tag_name, 'rc') &&
      !contains(github.event.release.tag_name, 'beta')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.ref }}

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Backup database
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_HOST }} << 'EOF'
            # Create backup before deployment
            docker exec gatekeeper-db pg_dump -U postgres gatekeeper > /backup/gatekeeper_$(date +%Y%m%d_%H%M%S).sql
          EOF

      - name: Deploy to production (blue-green)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/gatekeeper

            # Pull new image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}

            # Start new container (green)
            export IMAGE_TAG=${{ github.event.release.tag_name }}
            docker-compose -f docker-compose.green.yml up -d

            # Wait for health check
            sleep 15

            # Check health
            if curl -f http://localhost:8081/health; then
              echo "✅ Green deployment healthy"

              # Switch traffic to green
              docker-compose -f docker-compose.yml down
              mv docker-compose.green.yml docker-compose.yml

              echo "✅ Traffic switched to new version"
            else
              echo "❌ Green deployment failed health check"
              docker-compose -f docker-compose.green.yml down
              exit 1
            fi
          EOF

      - name: Run production health checks
        run: |
          # Comprehensive health checks
          curl -f https://gatekeeper.example.com/health

          # Check database connectivity
          response=$(curl -s https://gatekeeper.example.com/health)
          if echo "$response" | grep -q "ok"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Run production smoke tests
        run: |
          # Test critical endpoints
          curl -f https://gatekeeper.example.com/auth/siwe/nonce

          # Test with valid auth (if test credentials available)
          # curl -H "Authorization: Bearer ${{ secrets.TEST_JWT }}" \
          #      https://gatekeeper.example.com/api/keys

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success
          environment-url: https://gatekeeper.example.com

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/gatekeeper

            # Restore previous version
            docker-compose -f docker-compose.backup.yml up -d

            echo "⚠️ Rolled back to previous version"
          EOF

      - name: Notify deployment
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "Production Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment*\nVersion: ${{ github.event.release.tag_name }}\nStatus: ${{ job.status }}\nURL: https://gatekeeper.example.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Generate deployment report
        run: |
          echo "## Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.release.tag_name || github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Database backup created" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Health checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Smoke tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Notifications sent" >> $GITHUB_STEP_SUMMARY

      - name: Update documentation
        run: |
          echo "Deployment completed. Update relevant documentation if needed."
