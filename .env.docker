# =============================================================================
# Gatekeeper Docker Environment Configuration
# =============================================================================
# This file contains default environment variables for Docker deployments.
# Copy to .env and customize for your environment.
#
# SECURITY NOTE: This file contains sensitive defaults.
# - DO NOT commit .env files to version control
# - Replace all default passwords and secrets before deploying
# - Use Docker secrets or external secret management in production
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
PORT=8080
BACKEND_PORT=8080
FRONTEND_PORT=3000

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
POSTGRES_DB=gatekeeper
POSTGRES_USER=gatekeeper
POSTGRES_PASSWORD=CHANGE_THIS_SECURE_PASSWORD_BEFORE_DEPLOYMENT
POSTGRES_PORT=5432

# Database connection pool settings
# Adjust based on your workload and available resources
DB_MAX_OPEN_CONNS=25
DB_MAX_IDLE_CONNS=5
DB_CONN_MAX_LIFETIME_MINUTES=5
DB_CONN_MAX_IDLE_TIME_MINUTES=1

# Full database URL (constructed automatically by docker-compose)
# DATABASE_URL=postgresql://gatekeeper:password@postgres:5432/gatekeeper?sslmode=disable

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
# CRITICAL: Change this to a strong random secret in production
# Generate with: openssl rand -base64 32
JWT_SECRET=CHANGE_THIS_TO_STRONG_RANDOM_SECRET_MINIMUM_32_BYTES
JWT_EXPIRY_HOURS=24

# =============================================================================
# ETHEREUM / BLOCKCHAIN CONFIGURATION
# =============================================================================
# Primary Ethereum RPC endpoint (required)
# Get a free API key from: https://www.alchemy.com/ or https://infura.io/
ETHEREUM_RPC=https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY_HERE

# Fallback RPC endpoint (optional but recommended for production)
ETHEREUM_RPC_FALLBACK=

# Chain ID: 1=Ethereum Mainnet, 5=Goerli, 11155111=Sepolia, 137=Polygon
CHAIN_ID=1

# Blockchain cache TTL in seconds (default: 300 = 5 minutes)
CACHE_TTL=300

# RPC timeout in seconds (default: 5)
RPC_TIMEOUT=5

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Log level: debug, info, warn, error
LOG_LEVEL=info

# =============================================================================
# SIWE (Sign-In with Ethereum) CONFIGURATION
# =============================================================================
# Nonce TTL in minutes (default: 5)
NONCE_TTL_MINUTES=5

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================
# API key creation rate limit per user per hour (default: 10)
API_KEY_CREATION_RATE_LIMIT=10
# API key creation burst limit (default: 3)
API_KEY_CREATION_BURST_LIMIT=3

# API usage rate limit per user per minute (default: 1000)
API_USAGE_RATE_LIMIT=1000
# API usage burst limit (default: 100)
API_USAGE_BURST_LIMIT=100

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================
# Backend API URL for frontend to connect to
# For Docker: use http://backend:8080 for internal, http://localhost:8080 for external
VITE_API_URL=http://localhost:8080

# WalletConnect Project ID (get from: https://cloud.walletconnect.com/)
# Required for WalletConnect v2 support
VITE_WALLETCONNECT_PROJECT_ID=YOUR_WALLETCONNECT_PROJECT_ID_HERE

# Chain ID for frontend (should match CHAIN_ID above)
VITE_CHAIN_ID=1

# Enable testnets in wallet connection UI (true/false)
VITE_ENABLE_TESTNETS=false

# =============================================================================
# PRODUCTION DEPLOYMENT SETTINGS
# =============================================================================
# Environment mode: development, production
ENV=production
NODE_ENV=production

# =============================================================================
# DOCKER-SPECIFIC CONFIGURATION
# =============================================================================
# Container resource limits are defined in docker-compose.yml
# Adjust the deploy.resources section based on your infrastructure

# =============================================================================
# SECURITY CHECKLIST FOR PRODUCTION
# =============================================================================
# Before deploying to production, ensure you have:
# ✓ Changed POSTGRES_PASSWORD to a strong random password
# ✓ Changed JWT_SECRET to a strong random secret (min 32 bytes)
# ✓ Obtained valid ETHEREUM_RPC API key from Alchemy/Infura
# ✓ Obtained VITE_WALLETCONNECT_PROJECT_ID from WalletConnect
# ✓ Enabled HTTPS/TLS termination (use reverse proxy like Traefik/nginx)
# ✓ Configured firewall rules to restrict database access
# ✓ Set up automated backups for postgres_data volume
# ✓ Reviewed and adjusted rate limits based on expected traffic
# ✓ Set LOG_LEVEL to 'warn' or 'error' to reduce log volume
# ✓ Configured monitoring and alerting
# ✓ Set up log aggregation (e.g., ELK stack, Grafana Loki)
# ✓ Enabled database SSL/TLS in production (modify DATABASE_URL sslmode)

# =============================================================================
# QUICK START GUIDE
# =============================================================================
# 1. Copy this file to .env:
#    cp .env.docker .env
#
# 2. Edit .env and update all values marked with CHANGE_THIS or YOUR_*_HERE
#
# 3. Generate secure secrets:
#    JWT_SECRET: openssl rand -base64 32
#    POSTGRES_PASSWORD: openssl rand -base64 24
#
# 4. Start the services:
#    docker-compose up -d
#
# 5. Check service health:
#    docker-compose ps
#    docker-compose logs -f backend
#    docker-compose logs -f frontend
#
# 6. Access the application:
#    Frontend: http://localhost:3000
#    Backend API: http://localhost:8080
#    API Docs: http://localhost:8080/docs
#    Health Check: http://localhost:8080/health
#
# 7. Stop the services:
#    docker-compose down
#
# 8. Remove all data (CAUTION - deletes database):
#    docker-compose down -v
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
# View logs:
#   docker-compose logs -f [service_name]
#
# Restart a service:
#   docker-compose restart [service_name]
#
# Rebuild after code changes:
#   docker-compose up -d --build
#
# Check service health:
#   docker-compose ps
#   docker inspect gatekeeper-backend
#   docker inspect gatekeeper-frontend
#   docker inspect gatekeeper-postgres
#
# Access database:
#   docker-compose exec postgres psql -U gatekeeper -d gatekeeper
#
# View database logs:
#   docker-compose logs postgres
#
# Execute commands in container:
#   docker-compose exec backend /bin/sh
#
# =============================================================================
