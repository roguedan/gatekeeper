version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gatekeeper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gatekeeper}
      POSTGRES_USER: ${POSTGRES_USER:-gatekeeper}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpassword}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gatekeeper}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - gatekeeper-network

  # Redis Cache (optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: gatekeeper-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - gatekeeper-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gatekeeper-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Server configuration
      PORT: ${PORT:-8080}

      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-gatekeeper}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-gatekeeper}?sslmode=disable
      DB_MAX_OPEN_CONNS: ${DB_MAX_OPEN_CONNS:-25}
      DB_MAX_IDLE_CONNS: ${DB_MAX_IDLE_CONNS:-5}
      DB_CONN_MAX_LIFETIME_MINUTES: ${DB_CONN_MAX_LIFETIME_MINUTES:-5}
      DB_CONN_MAX_IDLE_TIME_MINUTES: ${DB_CONN_MAX_IDLE_TIME_MINUTES:-1}

      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS:-24}

      # Ethereum configuration
      ETHEREUM_RPC: ${ETHEREUM_RPC:-https://eth-mainnet.g.alchemy.com/v2/your-api-key}
      ETHEREUM_RPC_FALLBACK: ${ETHEREUM_RPC_FALLBACK:-}
      CHAIN_ID: ${CHAIN_ID:-1}
      CACHE_TTL: ${CACHE_TTL:-300}
      RPC_TIMEOUT: ${RPC_TIMEOUT:-5}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # SIWE configuration
      NONCE_TTL_MINUTES: ${NONCE_TTL_MINUTES:-5}

      # Rate limiting
      API_KEY_CREATION_RATE_LIMIT: ${API_KEY_CREATION_RATE_LIMIT:-10}
      API_KEY_CREATION_BURST_LIMIT: ${API_KEY_CREATION_BURST_LIMIT:-3}
      API_USAGE_RATE_LIMIT: ${API_USAGE_RATE_LIMIT:-1000}
      API_USAGE_BURST_LIMIT: ${API_USAGE_BURST_LIMIT:-100}

    ports:
      - "${BACKEND_PORT:-8080}:8080"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

    networks:
      - gatekeeper-network

    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: gatekeeper-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # API endpoint for frontend
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      VITE_WALLETCONNECT_PROJECT_ID: ${VITE_WALLETCONNECT_PROJECT_ID:-}
      VITE_CHAIN_ID: ${VITE_CHAIN_ID:-1}
      VITE_ENABLE_TESTNETS: ${VITE_ENABLE_TESTNETS:-false}

    ports:
      - "${FRONTEND_PORT:-3000}:3000"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

    networks:
      - gatekeeper-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

networks:
  gatekeeper-network:
    driver: bridge
    name: gatekeeper-network

volumes:
  postgres_data:
    name: gatekeeper-postgres-data
  redis_data:
    name: gatekeeper-redis-data
